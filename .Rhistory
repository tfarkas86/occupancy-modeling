p.z[j,k] <- z[j]*p[j,k]
logit(p[j,k]) <- b0 + b.jday*jday[j]
#-------------------------------------#
}##close k loop
}##close the j loop
######################
## Define the priors
######################
#------------------------------------------------#
#***1.3. DEFINE PRIOR FOR THE INTERCEPT AND   ***#
#***3 COEFFICIENTS IN THE OCCUPANCY LIKELIHOOD***#
a0 ~ dnorm(0, 0.001)
a.elev ~ dnorm(0, 0.001)
a.burn ~ dnorm(0, 0.001)
a.canopy ~ dnorm(0, 0.001)
#------------------------------------------------#
#-----------------------------------------------#
#***1.4. DEFINE PRIOR FOR THE INTERCEPT AND  ***#
#***COEFFICIENT OF THE OBSERVATION LIKELIHOOD***#
b0 ~ dnorm(0, 0.001)
b.jday ~ dnorm(0, 0.001)
#-----------------------------------------------#
}", fill = T) ##close the model and the cat statement
sink() ##close the sink function
####################################################
## SECTION 2
## Format the data and pass it to JAGS for analysis
####################################################
library(R2jags)
##Put all the data in a list objects to be passed to JAGS
##Note the names of each element of the list (e.g., y, T, N)
##must be the same names used in the JAGS model
#------------------------------#
#***2.1 SCALE THE COVARIATES***#
elev.scale = scale(covar$elev)[,1]
burn.scale = scale(covar$burn.sev)[,1]
canopy.scale = scale(covar$canopy.cover)[,1]
date.scale = scale(covar$jday)[,1]
#------------------------------#
#--------------------------------#
#***2.2. CREATE A LIST OF DATA***#
jags.data <- list(y=yrwa.d, N=nrow(yrwa.d), T=ncol(yrwa.d), elev=elev.scale,
burn=burn.scale, canopy=canopy.scale,
jday=date.scale)
#--------------------------------#
##Initial values for whether a site is occupied.
##You pass a function rather than simple a vector of values
##so that JAGS can create multiple chains.
#-----------------------------#
inits <- function(){
list(z=apply(yrwa.d, 1, max))
}
#-----------------------------#
##Parameters to monitor
#---------------------------------------------#
params <- c("a0", "a.elev", "a.burn", "a.canopy", "b0", "b.jday")
#---------------------------------------------#
##fit the model with JAGS
#--------------------------------------#
fit = jags(data=jags.data,
model.file="covariate_occupancy_model.txt",
inits = inits,
parameters.to.save=params,
n.burnin=1000,
n.iter=5000,
n.thin=2,
n.chains=3)
fit
bob <- read.csv("~/Dropbox/Occupancy Modelling/bobcat.csv")
str(bbob)
str(bob
)
bd <- bob[,(ncol(bd)-4):ncol(bd)]
bd <- bob[,(ncol(bob)-4):ncol(bob)]
bd
bd <- bob[,(ncol(bob)-3):ncol(bob)]
bd
str(bob)
rd <- bob[,8:11]
rd
bob <- read.csv("~/Dropbox/Occupancy Modelling/bobcat.csv") # all data
bd <- bob[,(ncol(bob)-3):ncol(bob)] # observations
rd <- bob[,8:11]
# JAGS model
sink("~/Dropbox/Occupancy Modelling/bobcat_jags.txt")
cat("
# model structure
# define likelihoods
for(j in 1:sites) {
z[j] ~ bern(psi[j])
logit(psi[j]) <- a0 + a_urban*urban[j] + a_wetland*wetland[j] + a_rabbit*rabbit[j]
for (k in 1:survs) {
pz[j,k] <- z[j] * p[j,k]
y[j,k] ~ bern(pz[j,k])
logit(p[j,k]) <- b0 + b_urban*urban[j] + b_wetland*wetland[j] + b_rabbit*rabbit[j] +
b_rain*rain[j,k]
}
}
# define priors
a0 ~ dnorm(0, 0.001)
a_urban ~ dnorm(0, 0.001)
a_wetland ~ dnorm(0, 0.001)
a_rabbit ~ dnorm(0, 0.001)
b0 ~ dnorm(0, 0.001)
b_rain ~ dnorm(0, 0.001)
", fill=TRUE)
sink()
library(R2jags)
s.urb <- scale(bob$urban)[,1]
surb
s.urb
s.wet <- scale(bob$wetland)[,1]
s.rab <- scale(bob$rabbit)[,1]
jags.data <- list(y=bd, sites=nrow(bd), survs=ncol(rd), urban=s.urb,
wetland=s.wet, rabbit=s.rab, rain=rd)
jags.data
inits <- function() list(z=apply(bd, 1, max))
params <- c("a0", "a_urban", "a_wetland", "a_rabbit", "b0", "b_urban", "b_wetland",
"b_rabbit", "b_rain")
?jags
fit <- jags(data=jags.data,
model.file="~/Dropbox/Occupancy Modelling/bobcat_jags.txt",
inits=inits,
n.chains=3,
n.iter=3000,
n.burnin=1000,
n.thin=2, DIC=FALSE)
sink("~/Dropbox/Occupancy Modelling/bobcat_jags.txt")
cat("
# model structure
# define likelihoods
for(j in 1:sites) {
z[j] ~ bern(psi[j])
logit(psi[j]) <- a0 + a_urban*urban[j] + a_wetland*wetland[j] + a_rabbit*rabbit[j]
for (k in 1:survs) {
pz[j,k] <- z[j] * p[j,k]
y[j,k] ~ bern(pz[j,k])
logit(p[j,k]) <- b0 + b_urban*urban[j] + b_wetland*wetland[j] + b_rabbit*rabbit[j] +
b_rain*rain[j,k]
}
}
# define priors
a0 ~ dnorm(0, 0.001)
a_urban ~ dnorm(0, 0.001)
a_wetland ~ dnorm(0, 0.001)
a_rabbit ~ dnorm(0, 0.001)
b0 ~ dnorm(0, 0.001)
b_rain ~ dnorm(0, 0.001)
", fill=TRUE)
sink()
library(R2jags)
# scale the variables
s.urb <- scale(bob$urban)[,1]
s.wet <- scale(bob$wetland)[,1]
s.rab <- scale(bob$rabbit)[,1]
# make jags list
jags.data <- list(y=bd, sites=nrow(bd), survs=ncol(rd), urban=s.urb,
wetland=s.wet, rabbit=s.rab, rain=rd)
inits <- function() list(z=apply(bd, 1, max)) # inital values for z
params <- c("a0", "a_urban", "a_wetland", "a_rabbit", "b0", "b_urban", "b_wetland",
"b_rabbit", "b_rain")
fit <- jags(data=jags.data,
model.file="~/Dropbox/Occupancy Modelling/bobcat_jags.txt",
inits=inits,
n.chains=3,
n.iter=3000,
n.burnin=1000,
n.thin=2)
fit <- jags(data=jags.data,
model.file="~/Dropbox/Occupancy Modelling/bobcat_jags.txt",
parameters.to.save=params,
inits=inits,
n.chains=3,
n.iter=3000,
n.burnin=1000,
n.thin=2)
sink("~/Dropbox/Occupancy Modelling/bobcat_jags.txt")
cat("model {
# model structure
# define likelihoods
for(j in 1:sites) {
z[j] ~ bern(psi[j])
logit(psi[j]) <- a0 + a_urban*urban[j] + a_wetland*wetland[j] + a_rabbit*rabbit[j]
for (k in 1:survs) {
pz[j,k] <- z[j] * p[j,k]
y[j,k] ~ bern(pz[j,k])
logit(p[j,k]) <- b0 + b_urban*urban[j] + b_wetland*wetland[j] + b_rabbit*rabbit[j] +
b_rain*rain[j,k]
}
}
# define priors
a0 ~ dnorm(0, 0.001)
a_urban ~ dnorm(0, 0.001)
a_wetland ~ dnorm(0, 0.001)
a_rabbit ~ dnorm(0, 0.001)
b0 ~ dnorm(0, 0.001)
b_rain ~ dnorm(0, 0.001)
}", fill=TRUE)
sink()
fit <- jags(data=jags.data,
model.file="~/Dropbox/Occupancy Modelling/bobcat_jags.txt",
parameters.to.save=params,
inits=inits,
n.chains=3,
n.iter=3000,
n.burnin=1000,
n.thin=2)
sink("~/Dropbox/Occupancy Modelling/bobcat_jags.txt")
cat("model {
# model structure
# define likelihoods
for(j in 1:sites) {
z[j] ~ dbern(psi[j])
logit(psi[j]) <- a0 + a_urban*urban[j] + a_wetland*wetland[j] + a_rabbit*rabbit[j]
for (k in 1:survs) {
pz[j,k] <- z[j] * p[j,k]
y[j,k] ~ dbern(pz[j,k])
logit(p[j,k]) <- b0 + b_urban*urban[j] + b_wetland*wetland[j] + b_rabbit*rabbit[j] +
b_rain*rain[j,k]
}
}
# define priors
a0 ~ dnorm(0, 0.001)
a_urban ~ dnorm(0, 0.001)
a_wetland ~ dnorm(0, 0.001)
a_rabbit ~ dnorm(0, 0.001)
b0 ~ dnorm(0, 0.001)
b_rain ~ dnorm(0, 0.001)
}", fill=TRUE)
sink()
fit <- jags(data=jags.data,
model.file="~/Dropbox/Occupancy Modelling/bobcat_jags.txt",
parameters.to.save=params,
inits=inits,
n.chains=3,
n.iter=3000,
n.burnin=1000,
n.thin=2)
rd
jags.data
bob <- read.csv("~/Dropbox/Occupancy Modelling/bobcat.csv") # all data
bd <- bob[,(ncol(bob)-3):ncol(bob)] # observations
rd <- bob[,8:11]
# JAGS model
sink("~/Dropbox/Occupancy Modelling/bobcat_jags.txt")
cat("model {
# model structure
# define likelihoods
for(j in 1:sites) {
z[j] ~ dbern(psi[j])
logit(psi[j]) <- a0 + a_urban*urban[j] + a_wetland*wetland[j] + a_rabbit*rabbit[j]
for (k in 1:survs) {
y[j,k] ~ dbern(pz[j,k])
pz[j,k] <- z[j] * p[j,k]
logit(p[j,k]) <- b0 + b_urban*urban[j] + b_wetland*wetland[j] + b_rabbit*rabbit[j] +
b_rain*rain[j,k]
}
}
# define priors
a0 ~ dnorm(0, 0.001)
a_urban ~ dnorm(0, 0.001)
a_wetland ~ dnorm(0, 0.001)
a_rabbit ~ dnorm(0, 0.001)
b0 ~ dnorm(0, 0.001)
b_rain ~ dnorm(0, 0.001)
}", fill=TRUE)
sink()
fit <- jags(data=jags.data,
model.file="~/Dropbox/Occupancy Modelling/bobcat_jags.txt",
parameters.to.save=params,
inits=inits,
n.chains=3,
n.iter=3000,
n.burnin=1000,
n.thin=2)
bd
rd
sink("~/Dropbox/Occupancy Modelling/bobcat_jags.txt")
cat("model {
# model structure
# define likelihoods
for(j in 1:sites) {
z[j] ~ dbern(psi[j])
logit(psi[j]) <- a0 + a_urban*urban[j] + a_wetland*wetland[j] + a_rabbit*rabbit[j]
for (k in 1:survs) {
y[j,k] ~ dbern(pz[j,k])
pz[j,k] <- z[j] * p[j,k]
logit(p[j,k]) <- b0 + b_urban*urban[j] + b_wetland*wetland[j] + b_rabbit*rabbit[j] + b_rain*rain[j,k]
}
}
# define priors
a0 ~ dnorm(0, 0.001)
a_urban ~ dnorm(0, 0.001)
a_wetland ~ dnorm(0, 0.001)
a_rabbit ~ dnorm(0, 0.001)
b0 ~ dnorm(0, 0.001)
b_rain ~ dnorm(0, 0.001)
}", fill=TRUE)
sink()
fit <- jags(data=jags.data,
model.file="~/Dropbox/Occupancy Modelling/bobcat_jags.txt",
parameters.to.save=params,
inits=inits,
n.chains=3,
n.iter=3000,
n.burnin=1000,
n.thin=2)
bd
rd
# load and format bobcat data
bob <- read.csv("~/Dropbox/Occupancy Modelling/bobcat.csv") # all data
bd <- bob[,(ncol(bob)-3):ncol(bob)] # observations
rd <- bob[,8:11]
# JAGS model
sink("~/Dropbox/Occupancy Modelling/bobcat_jags.txt")
cat("model {
# model structure
# define likelihoods
for(j in 1:sites) {
z[j] ~ dbern(psi[j])
logit(psi[j]) <- a0 + a_urban*urban[j] + a_wetland*wetland[j] + a_rabbit*rabbit[j]
for (k in 1:survs) {
y[j,k] ~ dbern(pz[j,k])
pz[j,k] <- z[j] * p[j,k]
logit(p[j,k]) <- b0 + b_urban*urban[j] + b_wetland*wetland[j] +
b_rabbit*rabbit[j] + b_rain*rain[j,k]
}
}
# define priors
a0 ~ dnorm(0, 0.001)
a_urban ~ dnorm(0, 0.001)
a_wetland ~ dnorm(0, 0.001)
a_rabbit ~ dnorm(0, 0.001)
b0 ~ dnorm(0, 0.001)
b_urban <- dnorm(0, 0.001)
b_wetland <- dnorm(0, 0.001)
b_rabbit <- dnorm(0, 0.001)
b_rain ~ dnorm(0, 0.001)
}", fill=TRUE)
sink()
fit <- jags(data=jags.data,
model.file="~/Dropbox/Occupancy Modelling/bobcat_jags.txt",
parameters.to.save=params,
inits=inits,
n.chains=3,
n.iter=3000,
n.burnin=1000,
n.thin=2)
bob <- read.csv("~/Dropbox/Occupancy Modelling/bobcat.csv") # all data
bd <- bob[,(ncol(bob)-3):ncol(bob)] # observations
rd <- bob[,8:11]
# JAGS model
sink("~/Dropbox/Occupancy Modelling/bobcat_jags.txt")
cat("model {
# model structure
# define likelihoods
for(j in 1:sites) {
z[j] ~ dbern(psi[j])
logit(psi[j]) <- a0 + a_urban*urban[j] + a_wetland*wetland[j] + a_rabbit*rabbit[j]
for (k in 1:survs) {
y[j,k] ~ dbern(pz[j,k])
pz[j,k] <- z[j] * p[j,k]
logit(p[j,k]) <- b0 + b_urban*urban[j] + b_wetland*wetland[j] +
b_rabbit*rabbit[j] + b_rain*rain[j,k]
}
}
# define priors
a0 ~ dnorm(0, 0.001)
a_urban ~ dnorm(0, 0.001)
a_wetland ~ dnorm(0, 0.001)
a_rabbit ~ dnorm(0, 0.001)
b0 ~ dnorm(0, 0.001)
b_urban ~ dnorm(0, 0.001)
b_wetland ~ dnorm(0, 0.001)
b_rabbit ~ dnorm(0, 0.001)
b_rain ~ dnorm(0, 0.001)
}", fill=TRUE)
sink()
fit <- jags(data=jags.data,
model.file="~/Dropbox/Occupancy Modelling/bobcat_jags.txt",
parameters.to.save=params,
inits=inits,
n.chains=3,
n.iter=3000,
n.burnin=1000,
n.thin=2)
fit
trace.plot(fit)
traceplot(fit)
?jags
?edf
?ecdf
post.wet <- fit$BUGSoutput$sims.list$wetland
wet_ecdf <- ecdf(post.wet)
post.wet
post.wet <- fit$BUGSoutput$sims.list$a_wetland
wet_ecdf <- ecdf(post.wet)
wet_ecdf
wet.ecdf(0)
wet_ecdf(0)
post.wet
str(post.wet)
wet_ecdf(0)
fit
plogis(-1.533)
pocc <- plogis(.217) + plogis(1.479)*mean(bob$rabbit) + plogis(-1.533)*.75 +
plogis(.585)*mean(bob$wetland)
pocc
pocc <- plogis(.217) + plogis(1.479)*s.rab + plogis(-1.533)*.75 +
plogis(.585)*s.wet
pocc
pocc <- plogis(.217) + plogis(1.479)*(s.rab) + plogis(-1.533)*.75 +
plogis(.585)*mean(s.wet)
pocc
pocc <- plogis(.217) + plogis(1.479)*mean(s.rab) + plogis(-1.533)*.75 +
plogis(.585)*mean(s.wet)
pocc
fit
pdet <- plogis(-.875) + plogis(.267)*mean(s.rab) + plogis(-1.442)*0 +
plogis(1.063)*.75 + plogis(.118)*mean(s.wet)
pdet
library(nlme)
library(lattice)
data(ClostExp)
summary(ClostExp)
str(ClostExp)
ClostExp
dd <- ClostExp
xyplot(No.per.ml ~ Day|Nutrients, dd, groups=rep)
xyplot(No.per.ml ~ Day|Nutrients, dd)
xyplot(No.per.ml ~ Day|Nutrients, dd, groups=rep)
xyplot(No.per.ml ~ Day|Nutrients, dd, groups=rep, type="b")
xyplot(No.per.ml ~ Day|Nutrients, dd, groups=rep, type="b",
scales=list(relation="free"))
xyplot(No.per.ml ~ Day|Nutrients, dd, groups=rep, type="b",
scales=list(relation="free"), auto.key=list(columns=4, lines=TRUE))
subset(dd, Nutrients == "high" & No.per.ml > 1000)
subset(dd, Nutrients == "low" & No.per.ml > 1000)
subset(dd, Nutrients == "low" & No.per.ml > 100)
hi.c <- subset(dd, Nutrients=="high" & rep=="c")
hi.c
enn <- nrow(hi.c)
N.change <- hi.c$No.per.ml[-1]/hi.c$No.per.ml[-enn]
N.change
interval <- diff(hi.c$Day)
interval
?diff
interval <- diff(hi.c$Day, lag=0)
interval <- diff(hi.c$Day, lag=2)
interval
pgr <- log(N.change/interval)
interval <- diff(hi.c$Day)
pgr <- log(N.change/interval)
pgr
Nt <- hi.c$No.per.ml[-n]
plot(pgr ~ Nt)
Nt <- hi.c$No.per.ml[-enn]
plot(pgr ~ Nt)
mod1 <- lm(pgr ~ Nt)
mod1
abline(mod1)
EachPop <- lapply(split(dd, list(dd$Nutrients,dd$rep)),
function(X) {
n <- nrow(X)
N.change <- (X$No.per.ml[-1]/X$No.per.ml[-n])
interval <- diff(X$Day)
data.frame(Nutrients = as.factor(X$Nutrients[-n]),
rep = as.factor(X$rep[-n]),
pgr = log(N.change)/interval, Nt = X$No.per.ml[-n])
})
EachPop
for (i in 1:length(EachPop)) AllPops <- rbind(AllPops, EachPop[[i]])
AllPops <- NULL
for (i in 1:length(EachPop)) AllPops <- rbind(AllPops, EachPop[[i]])
AllPops
xyplot(pgr ~ Nt | rep*Nutrients, AllPops)
xyplot(pgr ~ Nt | rep*Nutrients, AllPops, layout=c(4, 2, 1))
xyplot(pgr ~ Nt | rep*Nutrients, AllPops, layout=c(4, 2, 1),
scales=list(x=list(rot=90)), panel=function(x, y))
xyplot(pgr ~ Nt | rep*Nutrients, AllPops, layout=c(4, 2, 1),
scales=list(x=list(rot=90)), panel=function(x, y){
panel.grid(h=-1, v=4)
panel.xyplot(x,y,type=c("p", "r"))
})
AllPops$ID <- with(AllPops, Nutrients:rep)
modSlope <- lme(prg ~ Nt + Nutrients + Nt:Nutrients, data=AllPops,
random=~1|ID)
modSlope <- lme(pgr ~ Nt + Nutrients + Nt:Nutrients, data=AllPops,
random=~1|ID)
summary(modSlope)
modSlope2 <- update(modSlope, weights=varExp())
anova(modSlope, modSlope2)
anova(modSlope2)
Anova(modSlope2, type=3)
Anova(modSlope2, type=2)
summary(modSlope2)$tTable
ilogistic <- function(t, alpha, N0, r) {
N0 * exp(r*t)/(1+alpha*N0 * (exp(r*t) - 1))
}
plot(No.per.ml ~ Day, dd, subset=Nutrients=="high")
cfs <- fixef(modSlope2)
cfs
curve(ilogistic(x, alpha=-cfs[2]/cfs[1], N0=6, r=cfs[1]),
1, 60, add=TRUE, lty=2)
?curve
x
]x
x
?nlsList
?dist
dist(c(a,b))
dist(c(1,2))
